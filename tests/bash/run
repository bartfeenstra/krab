#!/usr/bin/env bash

cd "$(dirname "$0")/../.." || exit

test_run_single_command() {
    local expected
    local cmd
    local actual

    expected='FoOBaRBaZQuX'
    cmd="echo $expected"
    actual="$(./bin/krab run "$cmd" 2>/dev/null)"
    assertEquals "$expected" "$actual"
}

test_run_single_failed_command() {
    ./bin/krab run 'foo-bar --baz --qux' 2>/dev/null
    assertNotEquals 0 "$?"
}

test_run_multiple_commands() {
    local expected1
    local expected2
    local actual

    expected1="FoOBaZ"
    expected2='BaRQuX'
    expected="$expected1$expected2"
    actual="$(./bin/krab run "printf $expected1" "printf $expected2" 2>/dev/null)"
    assertEquals "$expected" "$actual"
}

test_run_multiple_failed_commands() {
    local expected1
    local expected2
    local actual

    expected1="FoOBaZ"
    expected2='BaRQuX'
    actual="$(./bin/krab run "printf $expected1" 'foo-bar --baz --qux' "printf $expected2" 2>/dev/null)"
    assertEquals "$expected1" "$actual"
}

test_run_multiple_failed_commands_with_allowed_failures() {
    local expected1
    local expected2
    local actual

    expected1="FoOBaZ"
    expected2='BaRQuX'
    expected="$expected1$expected2"
    actual="$(./bin/krab run -l "printf $expected1" 'foo-bar --baz --qux' "printf $expected2" 2>/dev/null)"
    assertEquals "$expected" "$actual"
}

test_run_help() {
    local actual

    actual="$(./bin/krab run -h)"
    assertEquals 0 $?
    echo "$actual" | grep -i 'usage' &>/dev/null
    assertEquals 0 $?
}

test_run_unknown_argument() {
    local actual

    actual="$(./bin/krab run -X)"
    assertEquals 2 $?
    echo "$actual" | grep -i 'usage' &>/dev/null
    assertEquals 0 $?
}

. ./vendor/shunit2/shunit2