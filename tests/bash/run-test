#!/usr/bin/env bash

set -Euo pipefail

cd "$(dirname "$0")/../.." || exit

. ./tests/assert
. ./src/bash/run

test_krab_run_format_nanoseconds_high() {
    local expected
    local actual
    local duration

    duration=12756793337
    actual="$(_krab_run_format_nanoseconds $duration)"
    assertEquals 0 "$?"
    expected='12.756 second(s)'
    assertEquals "$expected" "$actual"
}

test_krab_run_format_nanoseconds_low() {
    local expected
    local actual
    local duration

    duration=1275679
    actual="$(_krab_run_format_nanoseconds $duration)"
    assertEquals 0 "$?"
    expected='0.001 second(s)'
    assertEquals "$expected" "$actual"
}

test_run_no_tasks() {
    local expected
    local actual

    actual="$(./bin/krab run 2>&1)"
    assertEquals 0 "$?"
    expected='NO TASKS TO RUN'
    if [[ ! "$actual" == *"$expected"* ]]; then
        fail "The command does not output '$expected'"
    fi
}

test_run_single_task() {
    local expected
    local cmd
    local actual

    expected='FoOBaRBaZQuX'
    cmd="echo $expected"
    actual="$(./bin/krab run "$cmd" 2>/dev/null)"
    assertEquals "$expected" "$actual"
}

test_run_single_failed_task() {
    ./bin/krab run 'foo-bar --baz --qux' 2>/dev/null
    assertNotEquals 0 "$?"
}

test_run_multiple_tasks() {
    local expected1
    local expected2
    local actual

    expected1="FoOBaZ"
    expected2='BaRQuX'
    expected="$expected1$expected2"
    actual="$(./bin/krab run "printf $expected1" "printf $expected2" 2>/dev/null)"
    assertEquals "$expected" "$actual"
}

test_run_multiple_failed_tasks() {
    local expected1
    local expected2
    local actual

    expected1="FoOBaZ"
    expected2='BaRQuX'
    actual="$(./bin/krab run "printf $expected1" 'foo-bar --baz --qux' "printf $expected2" 2>/dev/null)"
    assertEquals "$expected1" "$actual"
}

test_run_multiple_failed_tasks_with_allowed_failures() {
    local expected1
    local expected2
    local actual

    expected1="FoOBaZ"
    expected2='BaRQuX'
    expected="$expected1$expected2"
    actual="$(./bin/krab run -l "printf $expected1" 'foo-bar --baz --qux' "printf $expected2" 2>/dev/null)"
    assertEquals "$expected" "$actual"
}

test_run_common() {
    assert_command 'run'
}

. ./vendor/shunit2/shunit2