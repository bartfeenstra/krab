#!/usr/bin/env bash

set -Eeuo pipefail

_krab_stdio_message() {
    local message
    message=$1
    local highlight
    highlight=$(( $2 + 40))
    local normal
    normal=$(( $2 + 30))
    printf "\n\033[0;%dm  \033[0;1;%dm %s\033[0m\n\n" "$highlight" "$normal" "$message"
}

krab_stdio_state() {
    local message
    message=$1
    _krab_stdio_message "$message" 7 1>&2
}

krab_stdio_inform() {
    local message
    message=$1
    _krab_stdio_message "$message" 6 1>&2
}

krab_stdio_confirm() {
    local message
    message=$1
    _krab_stdio_message "$message" 2 1>&2
}

krab_stdio_alert() {
    local message
    message=$1
    _krab_stdio_message "$message" 1 1>&2
}

krab_semver_components() {
    local version
    version=$1
    krab_semver_validate "$version" || return 1
    local components
    components=(${version//\./ })
    echo "${components[0]} ${components[0]}.${components[1]} $version"
}

krab_semver_validate() {
    local version
    version=$1
    if [[ ! $version =~ ^[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}$ ]]; then
        krab_stdio_alert "$version is not a valid Semantic Version (x.y.z). See https://semver.org/."
        return 1
    fi
}

krab_run() {
    local total
    local failures

    total=$#

    # Aggregate results.
    failures=0

    for task in "$@"; do
        krab_stdio_state "Running $task..."
        if eval "$task"; then
            krab_stdio_confirm "$task PASSED"
         else
            failures=$((failures + 1))
            krab_stdio_alert "$task FAILED"
        fi
    done

    if [ $failures -eq 0 ]
    then
        krab_stdio_confirm "SUCCESS: $total PASSED."
        exit 0
    else
        krab_stdio_alert "ERROR: $failures OUT OF $total FAILED."
        exit 1
    fi
}

# This is our main functionality, and exposes our public API as subcommands.
if [ -z "${1:-}" ]; then
    krab_stdio_alert "Missing subcommand."
    exit 2
fi
command=$1
shift
function="krab_$(echo "$command" | tr '-' '_')"
if ! type -t "$function" >/dev/null || [ ! "$(type -t "$function")" = 'function' ]; then
    exit 2
fi
$function "$@"
